import java.util.Random;

public class QuickSort {

    // Função principal de ordenação
    public static void quickSort(int[] arr, int low, int high) {
        if (low < high) {
            // Encontre o índice de partição
            int pi = partition(arr, low, high);
            
            // Ordenar recursivamente as duas metades
            quickSort(arr, low, pi - 1);  // Antes do pivô
            quickSort(arr, pi + 1, high); // Após o pivô
        }
    }

    // Função para particionar o array e escolher o pivô
    private static int partition(int[] arr, int low, int high) {
        // Escolha o último elemento como pivô
        int pivot = arr[high];
        int i = (low - 1); // índice do menor elemento

        // Percorre o array e coloca os elementos menores que o pivô à esquerda
        for (int j = low; j < high; j++) {
            if (arr[j] <= pivot) {
                i++;
                // Troca arr[i] com arr[j]
                int temp = arr[i];
                arr[i] = arr[j];
                arr[j] = temp;
            }
        }

        // Coloca o pivô na posição correta
        int temp = arr[i + 1];
        arr[i + 1] = arr[high];
        arr[high] = temp;

        return i + 1; // Retorna o índice do pivô
    }

    // Função para gerar um array de inteiros aleatórios
    public static int[] generateRandomArray(int size, int bound) {
        Random random = new Random();
        int[] array = new int[size];
        for (int i = 0; i < size; i++) {
            array[i] = random.nextInt(bound);  // Valores aleatórios no intervalo de 0 a bound
        }
        return array;
    }

    // Função para imprimir o array
    public static void printArray(int[] arr) {
        for (int i = 0; i < arr.length; i++) {
            System.out.print(arr[i] + " ");
        }
        System.out.println();
    }

    // Função principal para testar o Quick Sort
    public static void main(String[] args) {
        int size = 20; // Tamanho do array
        int bound = 100; // Limite superior para os valores aleatórios

        // Gerar um array aleatório
        int[] array = generateRandomArray(size, bound);

        // Exibir o array original
        System.out.println("Array original:");
        printArray(array);

        // Ordenar o array
        quickSort(array, 0, array.length - 1);

        // Exibir o array ordenado
        System.out.println("Array ordenado:");
        printArray(array);
    }
}
